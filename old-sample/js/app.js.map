{"version":3,"sources":["app/controllers/controllers.js","app/directives/dot.js","app/filters/markdown.js","app/main.js","app/services/resource.js"],"names":[],"mappingspGA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA","file":"public/js/app.js","sourcesContent":["//'use strict';\n/* Controllers */\n\nangular.module('app.controllers', [])\n  .controller('MainController', ['$scope','Resource',function($scope,Resource) {\n    $scope.showAll = true;\n    $scope.regions = Resource.get({})\n    $scope.getMethylationLevel = function(data){\n      if (data.length > 0){\n        var excluded = 0\n        var included = 0\n        for(i=0;i<data.length;i++){\n          data[i].alignmentIdentity = (data[i].alignment.length-data[i].alignment.mismatches)/data[i].alignment.length;\n          data[i].percentConversion = data[i].bisulfite.convertedCpH/(data[i].bisulfite.unconvertedCpH+data[i].bisulfite.convertedCpH);\n          if (data[i].alignmentIdentity > .95 && data[i].percentConversion > .75){\n            data[i].include = true;\n            included += 1;\n          }else{\n            excluded += 1;\n          }\n        }\n        var referenceCpGSites = data[0].methylation.reference\n        var referenceLength = data[0].referenceLength\n        var analyses = data;\n        if (referenceCpGSites.length > 1){\n          return generateMethylation(referenceCpGSites,analyses);\n        }\n      }\n        return 0\n    };\n    $scope.getInfo = function(data){\n        $scope.title = data[0].barcode + \": \" + data[0].referenceName\n        $scope.showAll = false;\n        if (data.length > 0){\n        $scope.excluded = 0\n        $scope.included = 0\n        for(i=0;i<data.length;i++){\n          data[i].alignmentIdentity = (data[i].alignment.length-data[i].alignment.mismatches)/data[i].alignment.length;\n          data[i].percentConversion = data[i].bisulfite.convertedCpH/(data[i].bisulfite.unconvertedCpH+data[i].bisulfite.convertedCpH);\n          if (data[i].alignmentIdentity > .95 && data[i].percentConversion > .75){\n            data[i].include = true;\n            $scope.included += 1;\n          }else{\n            $scope.excluded += 1;\n          }\n        }\n        $scope.referenceCpGSites = data[0].methylation.reference\n        $scope.referenceLength = data[0].referenceLength\n        $scope.analyses = data;\n        $scope.percentMethylation = generateMethylation($scope.referenceCpGSites,$scope.analyses);\n      }\n    };\n    $scope.backToOverview = function(){\n      $scope.showAll = true\n    };\n  \t/*Resource.get(\n  \t\t{},\n  \t\tfunction(data){\n  \t\t\t$scope.excluded = 0\n  \t\t\t$scope.included = 0\n  \t\t\tfor(i=0;i<data.length;i++){\n  \t\t\t\tdata[i].alignmentIdentity = (data[i].alignment.length-data[i].alignment.mismatches)/data[i].alignment.length;\n  \t\t\t\tdata[i].percentConversion = data[i].bisulfite.convertedCpH/(data[i].bisulfite.unconvertedCpH+data[i].bisulfite.convertedCpH);\n  \t\t\t\tif (data[i].alignmentIdentity > .95 && data[i].percentConversion > .75){\n  \t\t\t\t\tdata[i].include = true;\n  \t\t\t\t\t$scope.included += 1;\n  \t\t\t\t}else{\n  \t\t\t\t\t$scope.excluded += 1;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\t$scope.referenceCpGSites = data[0].methylation.reference\n  \t\t\t$scope.referenceLength = data[0].referenceLength\n  \t\t\t$scope.analyses = data;\n  \t\t\t$scope.percentMethylation = generateMethylation($scope.referenceCpGSites,$scope.analyses);\n  \t});*/\n  \tvar generateMethylation = function(refSites,data){\n  \t\tvar methylationSite = []\n  \t\tfor(i=0;i<refSites.length;i++){\n  \t\t\tmethylationSite[i] = {'location':refSites[i],'m':0,'u':0}\n  \t\t}\n  \t\tfor(i=0;i<data.length;i++){\n  \t\t\tif (data[i].include){\n  \t\t\t\tfor (j=0;j<data[i].methylation.sequence.length;j++){\n  \t\t\t\t\tif (data[i].methylation.sequence[j] == 'M'){\n  \t\t\t\t\t\tmethylationSite[j]['m'] += 1\n  \t\t\t\t\t}else if (data[i].methylation.sequence[j] == 'U'){\n  \t\t\t\t\t\tmethylationSite[j]['u'] += 1\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t\treturn methylationSite;\n  \t}\n  \t$scope.percentMethylation = [];\n  \t$scope.setMethylation = function(){\n  \t\t$scope.percentMethylation = generateMethylation($scope.referenceCpGSites,$scope.analyses);\n  \t}\n  \t$scope.predicate = '1-(methylation.methylatedCpGSites/(methylation.methylatedCpGSites+methylation.cpGSites))'\n  \t$scope.includePredicate = 'include'\n      //code here\n  }]);","angular.module('dotDirective', [])\n\t.directive(\"dot\", function() {\n  return {\n    restrict: \"E\",\n    scope: {\n        methylation: '=',\n        samples: '='\n    },\n    templateUrl: 'partials/methylationDot.html',\n    replace: true,\n    controller: [ '$scope', function ($scope) {\n        var getRadius = function(samples){\n            if (samples > 100){\n                samples = 100\n            } else if (samples < 20){\n                samples = 20\n            }\n            return samples/10\n        }\n        $scope.radius = getRadius($scope.samples);\n    }]\n  }\n});","angular.module('markdown', [])\n    .filter('markdown', function () {\n        var converter = new Showdown.converter();\n        return function (text,user) {\n            var markdown = text || '';\n            var html =  converter.makeHtml(markdown).replace('{{user}}',user.firstName);\n            return html;\n        };\n    });\n\n//https://github.com/vpegado/angular-markdown-filter/blob/master/markdown.js","'use strict';\nrequire('controllers/controllers');\nrequire('services/resource');\nrequire('filters/markdown');\nrequire('directives/dot');\n\n// Declare app level module which depends on filters, and services\nangular.module('app', ['ngRoute','ngCookies','app.controllers','app.services.resource','ui.bootstrap.datetimepicker','markdown','dotDirective']).\nconfig(['$routeProvider','$locationProvider',function($routeProvider,$locationProvider) {\n  $routeProvider.when('/', {templateUrl: 'partials/main.html', controller: 'MainController'});\n  $routeProvider.otherwise({redirectTo: '/'});\n}]);","var resourceServices = angular.module('app.services.resource', ['ngResource']);\n \nresourceServices.factory('Resource', ['$resource','$window',\n  function($resource,$window){\n    return $resource('allData.json',{},\n    { 'get': { method:'GET'}\n    });\n  }]);"]}