{"version":3,"sources":["app/controllers/controllers.js","app/controllers/submitController.js","app/controllers/userController.js","app/controllers/viewController.js","app/directives/dot.js","app/filters/markdown.js","app/main.js","app/services/resource.js","app/services/user.js"],"names":[],"mappingszHA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApzEA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA","file":"public/js/app.js","sourcesContent":["//'use strict';\n/* Controllers */\n\nangular.module('app.controllers', [])\n  .controller('MainController', ['$scope','$routeParams','Resource',function($scope,$routeParams,Resource) {\n    $scope.showAll = true;\n    $scope.regions = {};\n    $scope.allSamples = {};\n    //$scope.regions = Resource.get({id: $routeParams['id']})\n    Resource.get({}, function(data){\n      var one = \"\";\n      for(key in data.regions){\n        one = key;\n        break;\n      }\n      var allKeys = []\n      for(sample in data.regions[one].samples){\n        allKeys.push(sample)\n      }\n      $scope.allSamples = allKeys;\n      $scope.regions = data;\n    });\n    $scope.getMethylationLevel = function(data){\n        if (typeof data === \"undefined\"){\n            return 0;\n        } else if (data.length > 0){\n        $scope.excluded = 0\n        $scope.included = 0\n        for(i=0;i<data.length;i++){\n          data[i].alignmentIdentity = (data[i].alignment.end-data[i].alignment.start-data[i].alignment.mismatches-data[i].alignment.gaps)/(data[i].alignment.end-data[i].alignment.start);\n          data[i].percentConversion = data[i].methylation.methylated/(data[i].methylation.methylated+data[i].methylation.unmethylated);\n          if (data[i].alignmentIdentity > .95){\n            data[i].include = true;\n            $scope.included += 1;\n          }else{\n            $scope.excluded += 1;\n          }\n        };\n        $scope.referenceCpGSites = data[0].methylation.reference\n        $scope.referenceLength = data[0].referenceLength\n        $scope.analyses = data;\n        $scope.percentMethylation = generateMethylation($scope.referenceCpGSites,$scope.analyses);\n        var totalMethylation = 0\n        for(var i = 0; i < $scope.percentMethylation.length; i++){\n          totalMethylation += $scope.percentMethylation[i]['m']/($scope.percentMethylation[i]['m']+$scope.percentMethylation[i]['u'])\n        }\n        return (totalMethylation/$scope.percentMethylation.length);\n      }\n        return 0\n    };\n    $scope.getInfo = function(data){\n        $scope.title = data[0].barcode + \": \" + data[0].referenceName\n        $scope.showAll = false;\n        \n        if (data.length > 0){\n        $scope.excluded = 0\n        $scope.included = 0\n        for(i=0;i<data.length;i++){\n          data[i].alignmentIdentity = (data[i].alignment.end-data[i].alignment.start-data[i].alignment.mismatches-data[i].alignment.gaps)/(data[i].alignment.end-data[i].alignment.start);\n          data[i].percentConversion = data[i].methylation.methylated/(data[i].methylation.methylated+data[i].methylation.unmethylated);\n          if (data[i].alignmentIdentity > .95){\n            data[i].include = true;\n            $scope.included += 1;\n          }else{\n            $scope.excluded += 1;\n          }\n        };\n        $scope.referenceCpGSites = data[0].methylation.reference\n        $scope.referenceLength = data[0].referenceLength\n        $scope.analyses = data;\n        $scope.percentMethylation = generateMethylation($scope.referenceCpGSites,$scope.analyses);\n      }\n    };\n    $scope.backToOverview = function(){\n      $scope.showAll = true\n    };\n  \t/*Resource.get(\n  \t\t{},\n  \t\tfunction(data){\n  \t\t\t$scope.excluded = 0\n  \t\t\t$scope.included = 0\n  \t\t\tfor(i=0;i<data.length;i++){\n  \t\t\t\tdata[i].alignmentIdentity = (data[i].alignment.length-data[i].alignment.mismatches)/data[i].alignment.length;\n  \t\t\t\tdata[i].percentConversion = data[i].bisulfite.convertedCpH/(data[i].bisulfite.unconvertedCpH+data[i].bisulfite.convertedCpH);\n  \t\t\t\tif (data[i].alignmentIdentity > .95 && data[i].percentConversion > .75){\n  \t\t\t\t\tdata[i].include = true;\n  \t\t\t\t\t$scope.included += 1;\n  \t\t\t\t}else{\n  \t\t\t\t\t$scope.excluded += 1;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\t$scope.referenceCpGSites = data[0].methylation.reference\n  \t\t\t$scope.referenceLength = data[0].referenceLength\n  \t\t\t$scope.analyses = data;\n  \t\t\t$scope.percentMethylation = generateMethylation($scope.referenceCpGSites,$scope.analyses);\n  \t});*/\n  \tvar generateMethylation = function(refSites,data){\n  \t\tvar methylationSite = []\n  \t\tfor(i=0;i<refSites.length;i++){\n  \t\t\tmethylationSite[i] = {'location':refSites[i],'m':0,'u':0}\n  \t\t}\n  \t\tfor(i=0;i<data.length;i++){\n  \t\t\tif (data[i].include){\n  \t\t\t\tfor (j=0;j<data[i].methylation.sequence.length;j++){\n  \t\t\t\t\tif (data[i].methylation.sequence[j] == 'M'){\n  \t\t\t\t\t\tmethylationSite[j]['m'] += 1\n  \t\t\t\t\t}else if (data[i].methylation.sequence[j] == 'U'){\n  \t\t\t\t\t\tmethylationSite[j]['u'] += 1\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t\treturn methylationSite;\n  \t}\n  \t$scope.percentMethylation = [];\n  \t$scope.setMethylation = function(){\n  \t\t$scope.percentMethylation = generateMethylation($scope.referenceCpGSites,$scope.analyses);\n  \t}\n  \t$scope.predicate = '1-(methylation.methylatedCpGSites/(methylation.methylatedCpGSites+methylation.cpGSites))'\n  \t$scope.includePredicate = 'include'\n      //code here\n  }]);","angular.module('app.submitController', [])\n  .controller('SubmitController', ['$scope','Resource',function($scope,Resource) {\n    $scope.fastaSelect = function($files) {\n    \tvar reader = new FileReader();\n\t\treader.onload = function(e) {\n  \t\t\t$scope.fasta = reader.result;\n\t\t}\n\t\treader.readAsText($files[0]);\n    };\n    $scope.refSelect = function($files) {\n    \tvar reader = new FileReader();\n\t\treader.onload = function(e) {\n  \t\t\t$scope.ref = reader.result;\n\t\t}\n\t\treader.readAsText($files[0]);\n    };\n    $scope.mapSelect = function($files) {\n    \tvar reader = new FileReader();\n\t\treader.onload = function(e) {\n  \t\t\t$scope.map = reader.result;\n\t\t}\n\t\treader.readAsText($files[0]);\n\t};\n    $scope.submitForm = function() {\n    \tvar toSubmit = {}\n    \ttoSubmit['name'] = $scope.name;\n    \ttoSubmit['email'] = $scope.email;\n    \ttoSubmit['dna'] = $scope.fasta;\n    \ttoSubmit['references'] = $scope.ref;\n    \ttoSubmit['map'] = $scope.map;\n    \tResource.add(toSubmit,function(success){\n    \t\talert(\"Job submitted successfully.\")\n    \t},function(error){\n    \t\talert(\"Error in submition, please try again.\")\n    \t});\n    };\n  }]);","angular.module('app.userController', [])\n  .controller('UserController', ['$scope','User',function($scope,User) {\n    $scope.initialView = true\n    var initUser = function(user) {\n        $scope.user = user\n        console.log($scope.user);\n        User.getAll({id:user.id,command:\"maps\"},function(success){\n            $scope.user.maps = success;\n        },function(error){\n            alert(error);\n        });\n        User.getAll({id:user.id,command:\"references\"},function(success){\n            $scope.user.references = success;\n        },function(error){\n            alert(error);\n        });\n    }\n    $scope.getUser = function() {\n        $scope.user = User.get({\"email\":$scope.email},function(success){\n            initUser(success);\n        },function(error){\n            alert(error);\n        });\n        $scope.initialView = false\n        $scope.userView = true\n    };\n    $scope.newUser = function() {\n        var new_user = {};\n        new_user.name = $scope.name\n        new_user.email = $scope.email\n        new_user.analyses = [];\n        new_user.references = [];\n        new_user.maps = [];\n        new_user.params = [];\n        User.add(new_user,function(success){\n            initUser(success);\n        },function(error){\n            alert(error);\n        });\n        $scope.initialView = false\n        $scope.userView = true\n    };\n    $scope.uploadMap = function() {\n        var new_map = {};\n        new_map.name = $scope.mapName\n        new_map.value = $scope.map\n        User.add({id:$scope.user.id,command:\"maps\"},new_map,function(success){\n            initUser(success);\n        },function(error){\n            alert(error);\n        });\n    };\n    $scope.uploadRef = function() {\n        var new_ref = {};\n        new_ref.name = $scope.refName\n        new_ref.value = $scope.ref\n        User.add({id:$scope.user.id,command:\"references\"},new_ref,function(success){\n            initUser(success);\n        },function(error){\n            alert(error);\n        });\n    };\n    $scope.submitForm = function() {\n        User.add({id:$scope.user.id,command:\"analyses\", \"name\":$scope.name,\"ref\":$scope.selectRef.id,\"map\":$scope.selectMap.id},$scope.fasta, function(success){\n            alert(\"Submitted!\")\n        },function(error){\n            alert(error);\n        });\n    }\n    $scope.fastaSelect = function($files) {\n        var reader = new FileReader();\n        reader.onload = function(e) {\n            $scope.fasta = reader.result;\n        }\n        reader.readAsText($files[0]);\n    };\n    $scope.refSelect = function($files) {\n        var reader = new FileReader();\n        reader.onload = function(e) {\n            $scope.ref = reader.result;\n        }\n        reader.readAsText($files[0]);\n    };\n    $scope.mapSelect = function($files) {\n        var reader = new FileReader();\n        reader.onload = function(e) {\n            $scope.map = reader.result;\n        }\n        reader.readAsText($files[0]);\n    };\n  }]);","angular.module('app.viewController', [])\n  .controller('ViewController', ['$scope','Resource',function($scope,Resource) {\n    $scope.showAll = true;\n    //$scope.regions = Resource.get({id: $routeParams['id']})\n    $scope.regions = Resource.get({})\n}]);","angular.module('dotDirective', [])\n\t.directive(\"dot\", function() {\n  return {\n    restrict: \"E\",\n    scope: {\n        samples: '='\n    },\n    templateUrl: 'partials/methylationDot.html',\n    replace: true,\n    controller: [ '$scope', function ($scope) {\n        var getRadius = function(samples){\n          if (typeof samples === \"undefined\" || typeof samples.length === \"undefined\"){\n            return 0;\n          } else if (samples.length > 100){\n            radius = 100\n          } else if (samples.length < 20){\n            radius = 20\n          } else {\n            radius = samples.length\n          }\n          return radius/4\n        };\n        var getMethylationLevel = function(data){\n        if (typeof data === \"undefined\"){\n            return 0;\n        } else if (data.length > 0){\n        $scope.excluded = 0\n        $scope.included = 0\n        for(i=0;i<data.length;i++){\n          data[i].alignmentIdentity = (data[i].alignment.end-data[i].alignment.start-data[i].alignment.mismatches-data[i].alignment.gaps)/(data[i].alignment.end-data[i].alignment.start);\n          data[i].percentConversion = data[i].methylation.methylated/(data[i].methylation.methylated+data[i].methylation.unmethylated);\n          if (data[i].alignmentIdentity > .95){\n            data[i].include = true;\n            $scope.included += 1;\n          }else{\n            $scope.excluded += 1;\n          }\n        };\n        var referenceCpGSites = data[0].methylation.reference\n        var analyses = data;\n        var percentMethylation = generateMethylation(referenceCpGSites,analyses);\n        var totalMethylation = 0\n        for(var i = 0; i < percentMethylation.length; i++){\n          if (percentMethylation[i]['m'] + percentMethylation[i]['u']){\n            totalMethylation += percentMethylation[i]['m']/(percentMethylation[i]['m']+percentMethylation[i]['u'])\n          }\n        }           \n        return (totalMethylation/percentMethylation.length);\n      }\n        return 0\n    };\n    var generateMethylation = function(refSites,data){\n        var methylationSite = []\n        for(i=0;i<refSites.length;i++){\n            methylationSite[i] = {'location':refSites[i],'m':0,'u':0}\n        }\n        for(i=0;i<data.length;i++){\n            if (data[i].include){\n                for (j=0;j<data[i].methylation.sequence.length;j++){\n                    if (data[i].methylation.sequence[j] == 'M'){\n                        methylationSite[j]['m'] += 1\n                    }else if (data[i].methylation.sequence[j] == 'U'){\n                        methylationSite[j]['u'] += 1\n                    }\n                }\n            }\n        }\n        return methylationSite;\n    }\n        $scope.methylation = getMethylationLevel($scope.samples)\n        $scope.radius = getRadius($scope.samples);\n    }]\n  }\n});","angular.module('markdown', [])\n    .filter('markdown', function () {\n        var converter = new Showdown.converter();\n        return function (text,user) {\n            var markdown = text || '';\n            var html =  converter.makeHtml(markdown).replace('{{user}}',user.firstName);\n            return html;\n        };\n    });\n\n//https://github.com/vpegado/angular-markdown-filter/blob/master/markdown.js","'use strict';\nrequire('controllers/controllers');\nrequire('controllers/submitController')\nrequire('controllers/userController')\nrequire('controllers/viewController')\nrequire('services/resource');\nrequire('services/user');\nrequire('filters/markdown');\nrequire('directives/dot');\n\n// Declare app level module which depends on filters, and services\nangular.module('app', ['ngRoute','ngCookies','app.controllers','app.submitController','angularFileUpload','app.userController','app.viewController','app.services.resource','app.services.user','ui.bootstrap.datetimepicker','markdown','dotDirective']).\nconfig(['$routeProvider','$locationProvider',function($routeProvider,$locationProvider) {\n  $routeProvider.when('/', {templateUrl: 'partials/welcome.html', controller: 'UserController'});\n  $routeProvider.when('/view/:id', {templateUrl: 'partials/main.html', controller: 'MainController'});\n  $routeProvider.when('/test', {templateUrl: 'partials/view.html', controller: 'ViewController'});\n  $routeProvider.otherwise({redirectTo: '/'});\n}]);","var resourceServices = angular.module('app.services.resource', ['ngResource']);\n \nresourceServices.factory('Resource', ['$resource','$window',\n  function($resource,$window){\n    return $resource('data.json',{},\n    \t{\n    \t 'get': { method: 'GET' }\n    \t     \t}\n    );\n  }]);","var userService = angular.module('app.services.user', ['ngResource']);\n \nuserService.factory('User', ['$resource','$window',\n  function($resource,$window){\n    return $resource('api/user/:id/:command',{},\n    \t{\n    \t 'get': { method: 'GET' },\n    \t 'getAll': { method: 'GET', isArray: true},\n    \t 'add': { method: 'POST' }\n    \t}\n    );\n  }]);"]}